name: Deploy Production Server to AWS EC2 using Docker

on:
  push:
    branches:
      - main

env:
  DOCKER_IMAGE_NAME: ${{ secrets.PRODUCTION_DOCKER_IMAGE_NAME }}
  EC2_HOST: ${{ secrets.EC2_HOST }}
  EC2_SSH_USER: ec2-user
  PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
  CONTAINER_NAME_BLUE: ${{ secrets.CONTAINER_NAME_BLUE }}
  CONTAINER_NAME_GREEN: ${{ secrets.CONTAINER_NAME_GREEN }}
  BLUE_PORT: ${{ secrets.BLUE_PORT }}
  GREEN_PORT: ${{ secrets.GREEN_PORT }}

jobs:
  build-and-push-docker:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Set up application-blue.yml
        run: echo "${{ secrets.BLUE_APPLICATION }}" > ./src/main/resources/application-blue.yml

      - name: Set up application-green.yml
        run: echo "${{ secrets.GREEN_APPLICATION }}" > ./src/main/resources/application-green.yml

      - name: Build with Gradle
        run: ./gradlew build -x test -x asciidoctor
        
      - name: Build the Docker image
        run: docker build . --file Dockerfile --tag ${{ env.DOCKER_IMAGE_NAME }}:latest

      - name: Login to Docker Hub using Access Token
        run: echo "${{ secrets.DOCKER_HUB_TOKEN }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

      - name: Push the Docker image
        run: docker push ${{ env.DOCKER_IMAGE_NAME }}:latest

  deploy-to-ec2:
    needs: build-and-push-docker
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_SSH_USER }}
          key: ${{ env.PRIVATE_KEY }}
          script: |
            CURRENT_RUNNING=$(sudo docker ps --filter "name=${{ env.CONTAINER_NAME_BLUE }}" --format "{{.Names}}")
            
            if [ "$CURRENT_RUNNING" == "${{ env.CONTAINER_NAME_BLUE }}" ]; then
              sudo docker-compose pull app-prod-green
              sudo docker-compose up -d app-prod-green
            
              sleep 30
            
              sudo docker-compose stop app-prod-blue
              sudo docker-compose rm -f app-prod-blue
              sudo docker image prune -f
            else
              sudo docker-compose pull app-prod-blue
              sudo docker-compose up -d app-prod-blue
            
              sleep 30
            
              sudo docker-compose stop app-prod-green
              sudo docker-compose rm -f app-prod-green
              sudo docker image prune -f
            fi
            
            sudo systemctl reload nginx
