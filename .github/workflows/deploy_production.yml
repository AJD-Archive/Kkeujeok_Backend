name: Deploy Production Server to AWS EC2 using Docker

on:
  push:
    branches:
      - main

env:
  DOCKER_IMAGE_NAME: ${{ secrets.PRODUCTION_DOCKER_IMAGE_NAME }}
  EC2_HOST: ${{ secrets.EC2_HOST }}
  EC2_SSH_USER: ec2-user
  PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
  CONTAINER_NAME_BLUE: ${{ secrets.CONTAINER_NAME_BLUE }}
  CONTAINER_NAME_GREEN: ${{ secrets.CONTAINER_NAME_GREEN }}
  BLUE_PORT: ${{ secrets.BLUE_PORT }}
  GREEN_PORT: ${{ secrets.GREEN_PORT }}

jobs:
  build-and-push-docker:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Set up application-blue.yml
        run: echo "${{ secrets.BLUE_APPLICATION }}" > ./src/main/resources/application-blue.yml

      - name: Set up application-green.yml
        run: echo "${{ secrets.GREEN_APPLICATION }}" > ./src/main/resources/application-green.yml

      - name: Build with Gradle
        run: ./gradlew build -x test

      - name: Build the Docker image
        run: docker build . --file Dockerfile --tag ${{ env.DOCKER_IMAGE_NAME }}:latest

      - name: Login to Docker Hub using Access Token
        run: echo "${{ secrets.DOCKER_HUB_TOKEN }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

      - name: Push the Docker image
        run: docker push ${{ env.DOCKER_IMAGE_NAME }}:latest

  deploy-to-ec2:
    needs: build-and-push-docker
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_SSH_USER }}
          key: ${{ env.PRIVATE_KEY }}
          script: |
            if sudo docker ps -a -f name=${{ env.CONTAINER_NAME_BLUE }} | grep -q "${{ env.CONTAINER_NAME_BLUE }}"; then
              sudo docker pull ${{ env.DOCKER_IMAGE_NAME }}
              sudo docker run --name ${{ env.CONTAINER_NAME_GREEN }} -d -p ${{ env.GREEN_PORT }}:${{ env.GREEN_PORT }} -e SPRING_PROFILES_ACTIVE=green -e TZ=Asia/Seoul ${{ env.DOCKER_IMAGE_NAME }}:latest
              sleep 30
              sudo docker stop ${{ env.CONTAINER_NAME_BLUE }}
              sudo docker rm ${{ env.CONTAINER_NAME_BLUE }}
            else
              sudo docker pull ${{ env.DOCKER_IMAGE_NAME }}
              sudo docker run --name ${{ env.CONTAINER_NAME_BLUE }} -d -p ${{ env.BLUE_PORT }}:${{ env.BLUE_PORT }} -e SPRING_PROFILES_ACTIVE=blue -e TZ=Asia/Seoul ${{ env.DOCKER_IMAGE_NAME }}:latest
              sleep 30
              sudo docker stop ${{ env.CONTAINER_NAME_GREEN }}
              sudo docker rm ${{ env.CONTAINER_NAME_GREEN }}
            fi
            sudo systemctl reload nginx
